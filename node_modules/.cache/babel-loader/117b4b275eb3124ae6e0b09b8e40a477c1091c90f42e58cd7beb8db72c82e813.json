{"ast":null,"code":"import _slicedToArray from\"C:/Users/bubba/WebstormProjects/110finalproject/front/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";// import react from 'react';\n// import { io } from 'socket.io-client';\n// import logo from './logo.svg';\n// import './App.css';\n// import Init from './initialScreen.js';\n// import Chat from './Chat.js';\n// class App extends react.Component {\n//   constructor(props){\n//     super(props);\n//     this.socket = io('http://localhost:3000');\n//     this.state = {\n//       username: '',\n//       room: '',\n//       screen: \"init\",\n//     }\n//   }\n//   click = (room, message) => {\n//     console.log(room);\n//     this.socket.emit('join', {room: room, username: message});\n//     this.setState({room: room, username: message, screen: \"chat\"});\n//   }\n//   render(){\n//   return (\n//     <div className=\"App\">\n//       {this.state.screen === \"init\" ? <Init click={this.click}></Init> : <Chat socket={this.socket}></Chat>}\n//     </div>\n//   );\n//   }\n// }\n// export default App;\nimport React from\"react\";import\"./App.css\";import{createTheme,ThemeProvider}from\"@mui/material/styles\";import CssBaseline from\"@mui/material/CssBaseline\";import useMediaQuery from\"@mui/material/useMediaQuery\";import{getDesignTokens}from\"./themes/theme\";import{IconButton}from\"@mui/material\";import BedtimeIcon from\"@mui/icons-material/Bedtime\";import LightModeIcon from\"@mui/icons-material/LightMode\";import\"@fontsource/roboto/300.css\";import\"@fontsource/roboto/400.css\";import\"@fontsource/roboto/500.css\";import\"@fontsource/roboto/700.css\";import ScreenHandler from\"./ScreenHandler\";//let reached = false;\n//let adjusting = 0;\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){//const [selectedScreen, setSelectedScreen] = React.useState(0);\nvar prefersDarkMode=useMediaQuery(\"(prefers-color-scheme: dark)\");var _React$useState=React.useState(\"light\"),_React$useState2=_slicedToArray(_React$useState,2),mode=_React$useState2[0],setMode=_React$useState2[1];React.useEffect(function(){if(localStorage.getItem(\"mode\")!==null)setMode(localStorage.getItem(\"mode\"));else setMode(prefersDarkMode?\"dark\":\"light\");},[prefersDarkMode]);React.useEffect(function(){localStorage.setItem(\"mode\",mode);},[mode]);var colorMode=React.useMemo(function(){return{// The dark mode switch would invoke this method\ntoggleColorMode:function toggleColorMode(){setMode(function(prevMode){return prevMode===\"light\"?\"dark\":\"light\";});// localStorage.setItem('mode', mode)\n}};},[]);// Update the theme only if the mode changes\nvar theme=React.useMemo(function(){return createTheme(getDesignTokens(mode));},[mode]);var ColorModeContext=/*#__PURE__*/React.createContext({toggleColorMode:function toggleColorMode(){// This is intentional\n}});return/*#__PURE__*/_jsx(ColorModeContext.Provider,{value:colorMode,children:/*#__PURE__*/_jsxs(ThemeProvider,{theme:theme,children:[/*#__PURE__*/_jsx(CssBaseline,{}),/*#__PURE__*/_jsx(ScreenHandler,{}),/*#__PURE__*/_jsx(IconButton,{style:{zIndex:5,color:\"black\",position:\"absolute\",top:10,right:10},onClick:colorMode.toggleColorMode,\"aria-label\":\"delete\",children:mode===\"light\"?/*#__PURE__*/_jsx(BedtimeIcon,{}):/*#__PURE__*/_jsx(LightModeIcon,{})})]})});}export default App;","map":{"version":3,"names":["React","createTheme","ThemeProvider","CssBaseline","useMediaQuery","getDesignTokens","IconButton","BedtimeIcon","LightModeIcon","ScreenHandler","jsx","_jsx","jsxs","_jsxs","App","prefersDarkMode","_React$useState","useState","_React$useState2","_slicedToArray","mode","setMode","useEffect","localStorage","getItem","setItem","colorMode","useMemo","toggleColorMode","prevMode","theme","ColorModeContext","createContext","Provider","value","children","style","zIndex","color","position","top","right","onClick"],"sources":["C:/Users/bubba/WebstormProjects/110finalproject/front/src/App.js"],"sourcesContent":["// import react from 'react';\r\n// import { io } from 'socket.io-client';\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\n\r\n// import Init from './initialScreen.js';\r\n// import Chat from './Chat.js';\r\n\r\n// class App extends react.Component {\r\n//   constructor(props){\r\n//     super(props);\r\n\r\n//     this.socket = io('http://localhost:3000');\r\n//     this.state = {\r\n//       username: '',\r\n//       room: '',\r\n//       screen: \"init\",\r\n//     }\r\n//   }\r\n\r\n//   click = (room, message) => {\r\n//     console.log(room);\r\n//     this.socket.emit('join', {room: room, username: message});\r\n//     this.setState({room: room, username: message, screen: \"chat\"});\r\n//   }\r\n\r\n//   render(){\r\n//   return (\r\n//     <div className=\"App\">\r\n//       {this.state.screen === \"init\" ? <Init click={this.click}></Init> : <Chat socket={this.socket}></Chat>}\r\n//     </div>\r\n//   );\r\n//   }\r\n// }\r\n\r\n// export default App;\r\n\r\nimport React from \"react\";\r\nimport \"./App.css\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\r\nimport { getDesignTokens } from \"./themes/theme\";\r\nimport { IconButton } from \"@mui/material\";\r\nimport BedtimeIcon from \"@mui/icons-material/Bedtime\";\r\nimport LightModeIcon from \"@mui/icons-material/LightMode\";\r\nimport \"@fontsource/roboto/300.css\";\r\nimport \"@fontsource/roboto/400.css\";\r\nimport \"@fontsource/roboto/500.css\";\r\nimport \"@fontsource/roboto/700.css\";\r\n\r\nimport ScreenHandler from \"./ScreenHandler\";\r\n\r\n//let reached = false;\r\n//let adjusting = 0;\r\n\r\nfunction App() {\r\n  //const [selectedScreen, setSelectedScreen] = React.useState(0);\r\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\r\n  const [mode, setMode] = React.useState(\"light\");\r\n\r\n  React.useEffect(() => {\r\n    if (localStorage.getItem(\"mode\") !== null)\r\n      setMode(localStorage.getItem(\"mode\"));\r\n    else setMode(prefersDarkMode ? \"dark\" : \"light\");\r\n  }, [prefersDarkMode]);\r\n\r\n  React.useEffect(() => {\r\n    localStorage.setItem(\"mode\", mode);\r\n  }, [mode]);\r\n\r\n  const colorMode = React.useMemo(\r\n    () => ({\r\n      // The dark mode switch would invoke this method\r\n      toggleColorMode: () => {\r\n        setMode((prevMode) => (prevMode === \"light\" ? \"dark\" : \"light\"));\r\n        // localStorage.setItem('mode', mode)\r\n      },\r\n    }),\r\n    []\r\n  );\r\n\r\n  // Update the theme only if the mode changes\r\n  const theme = React.useMemo(() => createTheme(getDesignTokens(mode)), [mode]);\r\n  const ColorModeContext = React.createContext({\r\n    toggleColorMode: () => {\r\n      // This is intentional\r\n    },\r\n  });\r\n\r\n  return (\r\n    <ColorModeContext.Provider value={colorMode}>\r\n      <ThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n        \r\n        <ScreenHandler />\r\n        <IconButton\r\n          style={{\r\n            zIndex: 5,\r\n            color: \"black\",\r\n            position: \"absolute\",\r\n            top: 10,\r\n            right: 10,\r\n          }}\r\n          onClick={colorMode.toggleColorMode}\r\n          aria-label=\"delete\"\r\n        >\r\n          {mode === \"light\" ? <BedtimeIcon /> : <LightModeIcon />}\r\n        </IconButton>\r\n      </ThemeProvider>\r\n    </ColorModeContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}